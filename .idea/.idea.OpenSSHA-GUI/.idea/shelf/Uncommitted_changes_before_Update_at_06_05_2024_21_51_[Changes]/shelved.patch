Index: OpenSSHALib/Lib/Structs/PpkKey.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Diagnostics;\r\nusing System.Text;\r\nusing OpenSSHALib.Enums;\r\nusing OpenSSHALib.Models;\r\nusing Org.BouncyCastle.Asn1;\r\nusing Org.BouncyCastle.Asn1.Pkcs;\r\nusing Org.BouncyCastle.Crypto;\r\nusing Org.BouncyCastle.Crypto.Engines;\r\nusing Org.BouncyCastle.Crypto.Parameters;\r\nusing Org.BouncyCastle.Security;\r\nusing Org.BouncyCastle.Utilities.IO.Pem;\r\nusing SshNet.PuttyKeyFile;\r\nusing PemReader = Org.BouncyCastle.OpenSsl.PemReader;\r\nusing PemWriter = Org.BouncyCastle.Utilities.IO.Pem.PemWriter;\r\n\r\nnamespace OpenSSHALib.Lib.Structs;\r\n\r\npublic record struct PpkKey\r\n{\r\n    private const string EncryptionLineStart    = \"Encryption:\";\r\n    private const string PrivateKeyLineStart    = \"Private-Lines:\";\r\n    private const string PublicKeyLineStart     = \"Public-Lines:\";\r\n    private const string DefinitionLineStart    = \"PuTTY-User-Key-File\";\r\n    private const string CommentLineStart       = \"Comment:\";\r\n    private const string MacLineStart           = \"Private-MAC:\";\r\n\r\n    private const string BeginOpenSshPrivateKey = \"-----BEGIN OPENSSH PRIVATE KEY-----\";\r\n    private const string EndOpenSshPrivateKey   = \"-----END OPENSSH PRIVATE KEY-----\";\r\n    \r\n    public PpkKey(string filePath)\r\n    {\r\n        if (!File.Exists(filePath)) return;\r\n        FilePath = filePath;\r\n        var lines = File.ReadAllLines(FilePath);\r\n        EncryptionType = Enum.TryParse<EncryptionType>(\r\n            lines.FirstOrDefault(e => e.StartsWith(EncryptionLineStart)).Replace(EncryptionLineStart, \"\").Trim(),\r\n            out var parsedEncryptionType) \r\n            ? parsedEncryptionType \r\n            : EncryptionType.NONE;\r\n        KeyType = Enum.TryParse<KeyType>(\r\n            lines.FirstOrDefault(e => e.StartsWith(DefinitionLineStart)).Split('-')[0].Trim(),\r\n            out var parsedKeyType)\r\n            ? parsedKeyType\r\n            : KeyType.RSA;\r\n        Comment = (lines.FirstOrDefault(e => e.StartsWith(CommentLineStart)) ?? \"\").Replace(CommentLineStart, \"\").Trim();\r\n        PrivateKeyString = ExtractLines(lines, PrivateKeyLineStart);\r\n        PublicKeyString = ExtractLines(lines, PublicKeyLineStart);\r\n        PrivateMAC = (lines.FirstOrDefault(e => e.StartsWith(MacLineStart)) ?? \"\").Replace(MacLineStart, \"\").Trim();\r\n    }\r\n    \r\n    public string FilePath { get; private set; }\r\n\r\n    public KeyType KeyType { get; }\r\n    \r\n    public EncryptionType EncryptionType { get; }\r\n    \r\n    public string Comment { get; }\r\n    \r\n    public string PublicKeyString { get; }\r\n    \r\n    public string PrivateKeyString { get; }\r\n    \r\n    public string PrivateMAC { get; }\r\n\r\n    private string ExtractLines(string[] lines, string marker)\r\n    {\r\n        var startPosition = 0;\r\n        var linesToExtract = 0;\r\n        foreach (var line in lines.Select((content, index) => (content, index)))\r\n        {\r\n            if (startPosition == 0)\r\n            {\r\n                if (line.content.Contains(marker))\r\n                {\r\n                    linesToExtract = int.Parse(line.content.Replace(marker, \"\").Trim());\r\n                    startPosition = line.index + 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return string.Join(\"\", lines, startPosition, linesToExtract);\r\n    }\r\n    \r\n    public SshPublicKey? ConvertToOpenSshKey()\r\n    {\r\n        return null;\r\n        // var privateFilePath = FilePath.Replace(\".ppk\", \"\");\r\n        //\r\n        // var publicFilePath = privateFilePath + \".pub\";\r\n        //\r\n        // var convertFromPpk = new Process\r\n        // {\r\n        //     StartInfo = !OperatingSystem.IsWindows() ? new ProcessStartInfo\r\n        //     {\r\n        //         WindowStyle = ProcessWindowStyle.Hidden,\r\n        //         RedirectStandardOutput = true,\r\n        //         RedirectStandardError = true,\r\n        //         CreateNoWindow = true,\r\n        //         Arguments = $\"{FilePath} -O private-openssh -o \\\"{privateFilePath}\\\"\",\r\n        //         FileName = \"puttygen\"\r\n        //     } : new ProcessStartInfo\r\n        //     {\r\n        //         WindowStyle = ProcessWindowStyle.Hidden,\r\n        //         RedirectStandardOutput = true,\r\n        //         RedirectStandardError = true,\r\n        //         CreateNoWindow = true,\r\n        //         Arguments = $\"/keygen {FilePath} -o \\\"{privateFilePath}\\\"\",\r\n        //         FileName = \"winscp.com\"\r\n        //     }\r\n        // };\r\n        // convertFromPpk.Start();\r\n        //\r\n        // var convertError = convertFromPpk.StandardError.ReadToEnd();\r\n        // var convertSuccess = convertFromPpk.StandardOutput.ReadToEnd();\r\n        //\r\n        // if (!string.IsNullOrWhiteSpace(convertError)) return null;\r\n        //\r\n        // var directory = Directory.GetParent(FilePath)!.CreateSubdirectory(\"PPK\");\r\n        // var newFileDestination = Path.Combine(directory.FullName, Path.GetFileName(FilePath));\r\n        // File.Move(FilePath, newFileDestination);\r\n        // FilePath = newFileDestination;\r\n        //\r\n        //\r\n        // var extractPubKey = new Process\r\n        // {\r\n        //     StartInfo = new ProcessStartInfo\r\n        //     {\r\n        //         WindowStyle = ProcessWindowStyle.Hidden,\r\n        //         RedirectStandardOutput = true,\r\n        //         RedirectStandardError = true,\r\n        //         CreateNoWindow = true,\r\n        //         Arguments = $\"-y -f \\\"{privateFilePath}\\\"\",\r\n        //         FileName = \"ssh-keygen\"\r\n        //     }\r\n        // };\r\n        // extractPubKey.Start();\r\n        // var error = extractPubKey.StandardError.ReadToEnd();\r\n        // var output = extractPubKey.StandardOutput.ReadToEnd();\r\n        // if(string.IsNullOrWhiteSpace(error)) File.WriteAllText(publicFilePath, output);\r\n        // return new SshPublicKey(publicFilePath);\r\n    }\r\n\r\n    // public override string ToString()\r\n    // {\r\n    //     return $\"\";\r\n    // }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/OpenSSHALib/Lib/Structs/PpkKey.cs b/OpenSSHALib/Lib/Structs/PpkKey.cs
--- a/OpenSSHALib/Lib/Structs/PpkKey.cs	(revision 111facd074bf300163ccc9e49c17e889fc4c4c01)
+++ b/OpenSSHALib/Lib/Structs/PpkKey.cs	(date 1715025100846)
@@ -84,6 +84,15 @@
     
     public SshPublicKey? ConvertToOpenSshKey()
     {
+        using var sr = new StreamReader(FilePath);
+        var pemReader = new PemReader(sr);
+        var keyPair = (AsymmetricCipherKeyPair)p
+        
+        
+        
+        
+        
+        
         return null;
         // var privateFilePath = FilePath.Replace(".ppk", "");
         //

// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenSSH_GUI.Core.Database.Context;

#nullable disable

namespace OpenSSH_GUI.Core.Database.Migrations
{
    [DbContext(typeof(OpenSshGuiDbContext))]
    partial class OpenSshGuiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("ConnectionCredentialsDtoSshKeyDto", b =>
                {
                    b.Property<int>("ConnectionCredentialsDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeyDtosId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConnectionCredentialsDtoId", "KeyDtosId");

                    b.HasIndex("KeyDtosId");

                    b.ToTable("ConnectionCredentialsDtoSshKeyDto");
                });

            modelBuilder.Entity("OpenSSH_GUI.Core.Database.DTO.ConnectionCredentialsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PasswordEncrypted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConnectionCredentialsDtos");
                });

            modelBuilder.Entity("OpenSSH_GUI.Core.Database.DTO.SshKeyDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AbsolutePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AbsolutePath")
                        .IsUnique();

                    b.ToTable("KeyDtos");
                });

            modelBuilder.Entity("OpenSSH_GUI.Core.Lib.Settings.Settings", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ConvertPpkAutomatically")
                        .HasColumnType("INTEGER");

                    b.HasKey("Version");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ConnectionCredentialsDtoSshKeyDto", b =>
                {
                    b.HasOne("OpenSSH_GUI.Core.Database.DTO.ConnectionCredentialsDto", null)
                        .WithMany()
                        .HasForeignKey("ConnectionCredentialsDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSSH_GUI.Core.Database.DTO.SshKeyDto", null)
                        .WithMany()
                        .HasForeignKey("KeyDtosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

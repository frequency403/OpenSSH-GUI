name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*' # Trigger only on version tags like v1.2.3

jobs:
  # --- JOB 1: BUILD ---
  # This job runs in a matrix to build for all target platforms in parallel.
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest # A single runner is sufficient for cross-compilation
    strategy:
      matrix:
        # Define build targets for different platforms
        include:
          - target: linux-x64
            asset_name: OpenSSH-GUI-linux-x64
            asset_extension: ''
          - target: win-x64
            asset_name: OpenSSH-GUI-win-x64
            asset_extension: '.exe'
          - target: osx-x64
            asset_name: OpenSSH-GUI-osx-x64
            asset_extension: ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      # Restore, build, and publish the application for the specific target
      - name: Publish application
        run: |
          dotnet publish OpenSSH_GUI/OpenSSH_GUI.csproj \
            --configuration Release \
            --runtime ${{ matrix.target }} \
            --output "./publish" \
            -p:PublishSingleFile=true \
            -p:PublishReadyToRun=true \
            -p:IncludeNativeLibrariesForSelfExtract=true
      
      # Rename the output file to the desired asset name
      - name: Rename artifact
        run: mv ./publish/OpenSSH_GUI${{ matrix.asset_extension }} ./publish/${{ matrix.asset_name }}${{ matrix.asset_extension }}

      # Upload the compiled binary as a workflow artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}${{ matrix.asset_extension }}
          path: ./publish/${{ matrix.asset_name }}${{ matrix.asset_extension }}

  # --- JOB 2: RELEASE ---
  # This job runs only ONCE after all build jobs have successfully completed.
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # The 'needs' keyword ensures that this job waits for the 'build' job to finish
    needs: build
    permissions:
      contents: write # Required to create a release and upload assets
    # Ensure this job only runs for tag pushes, not for manual dispatches that should only build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      # Download all artifacts (from the matrix builds) into a single directory
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display structure of downloaded files
        run: ls -R artifacts

      # Create a single release and upload all files from the 'artifacts' directory
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # The release will be created from the pushed tag
          tag_name: ${{ github.ref_name }}
          # All files downloaded into the 'artifacts' directory will be uploaded
          files: "artifacts/**/*"
          # Automatically generate the release body from commits since the last tag
          generate_release_notes: true